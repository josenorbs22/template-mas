/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.8/samples
 */
/*
   Templete JaCaMo Project
*/
import java.io.ByteArrayOutputStream

defaultTasks("run")

plugins {
    java
    `maven-publish`
}

apply(from = ".jcm-deps.gradle") // Este arquivo contém as dependências declaradas nos arquivos .jcm

version = "1.0"
group = "org.jacamo"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
    maven {
        url = uri("https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master")
    }
    maven {
        url = uri("https://repo.gradle.org/gradle/libs-releases")
    }
    // flatDir { dirs("lib") }
    mavenCentral()
    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation("org.jacamo:jacamo:1.2")
}

sourceSets {
    val main by getting {
        java {
            // Adiciona múltiplos diretórios de fontes
            setSrcDirs(listOf("src/env", "src/agt", "src/org", "src/int", "src/java"))
        }
        resources {
            setSrcDirs(listOf("src/resources"))
        }
    }
}

// Tarefa "run" do tipo JavaExec
tasks.register<JavaExec>("run") {
    group = "JaCaMo"
    description = "runs the JaCaMo application"
    dependsOn("classes")
    doFirst {
        mkdir("log")
    }
    mainClass.set("jacamo.infra.JaCaMoLauncher")
    args("main.jcm")
    // jvmArgs("-Xss15m")
    classpath = sourceSets["main"].runtimeClasspath
}

// Tarefa "buildJCMDeps" do tipo JavaExec
tasks.register<JavaExec>("buildJCMDeps") {
    mainClass.set("jacamo.infra.RunJaCaMoProject")
    dependsOn("classes")
    args = listOf("main.jcm", "--deps")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set(project.name)
    // Inclui os arquivos do diretório "src" (exceto "test")
    from("${project.projectDir.absolutePath}/src") {
        include("**/*.asl")
        include("**/*.xml")
        include("**/*.sai")
        include("**/*.ptl")
        include("**/*.jcm")
        exclude("test")
    }
    // Inclui os arquivos compilados
    from("${project.buildDir.absolutePath}/classes") {
        include("**/*")
    }
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])
        }
    }
}

tasks.register<Jar>("uberJar") {
    group = "JaCaMo"
    description = "creates a single runnable jar file with all dependencies"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(mapOf("Main-Class" to "jacamo.infra.JaCaMoLauncher"))
    }
    archiveBaseName.set("jacamo-main") // O nome deve começar com "jacamo" para que o jar seja encontrado no classpath

    // Coleta todos os arquivos da configuração runtimeClasspath (descompactando os jars)
    from({
        configurations.runtimeClasspath.get().filter { it.exists() }.map {
            if (it.isDirectory) it else zipTree(it)
        }
    })
    from(project.projectDir.absolutePath) {
        include("**/*.asl", "**/*.xml", "**/*.sai", "**/*.ptl", "**/*.jcm", "*.properties")
    }
    from("${project.buildDir.absolutePath}/jcm") {
        include("**/*")
    }
    // Usa as configurações já definidas na tarefa jar existente
    with(tasks.jar.get())

    doFirst {
        copy {
            from("main.jcm")
            rename("main.jcm", "default.jcm")
            into("${project.buildDir.absolutePath}/jcm")
        }
    }
}


tasks.named<Delete>("clean") {
    delete("bin", "build", "log")
}